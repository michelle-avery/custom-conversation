{
  "config": {
    "step": {
      "user": {
        "data": {
          "api_key": "API Key",
          "base_url": "Base URL"
        }
      }
    },
    "error": {
      "cannot_connect": "Failed to connect",
      "invalid_auth": "Invalid authentication",
      "unknown": "Unexpected error"
    }
  },
  "options": {
    "step": {
      "init": {
        "data": {
          "prompt": "Instructions",
          "llm_hass_api": "Control Home Assistant"
        },
        "data_description": {
          "prompt": "Instruct how the LLM should respond. This can be a template."
        },
        "sections": {
          "ignored_intents_section": {
            "name": "Ignored Intents",
            "description": "Configure which intents should be ignored by the Custom LLM API.\nThose recommended by the current Home Assistant version are marked.",
            "data": {
              "ignored_intents": "Ignored Intents"
            }
          },
          "agents": {
            "name": "Custom LLM API Agents",
            "description": "Configure which agents are enabled for the Custom LLM API.\nEnabling both will try to resolve intents locally first,\nand then fall back to the configured LLM.",
            "data": {
              "enable_home_assistant_agent": "Enable Home Assistant Agent",
              "enable_llm_agent": "Enable LLM Agent"
            }
          },
          "llm_parameters": {
            "name": "LLM Parameters",
            "description": "Configure the LLM Parameters",
            "data": {
              "chat_model": "Chat Model",
              "max_tokens": "Max Tokens",
              "temperature": "Temperature",
              "top_p": "Top P"
            }
          },
          "custom_prompts":  {
            "name": "Customize Prompts",
            "description": "Customize the various prompt segments used by the Conversation agent and the API",
            "data": {
              "prompt_base": "Base Prompt",
              "prompt_no_enabled_entities": "No Enabled Entities Prompt",
              "prompt_api_base": "API Base Prompt",
              "prompt_device_known_location": "Device Known Location Prompt",
              "prompt_device_unknown_location": "Device Unknown Location Prompt",
              "prompt_timers_unsupported": "Timers Unsupported Prompt",
              "prompt_exposed_entities": "Exposed Entities Prompt"
            },
            "data_description": {
              "prompt_base": "The base prompt included in every LLM prompt. Can be a template.",
              "prompt_no_enabled_entities": "The prompt the API includesto when no entities are exposed.",
              "prompt_api_base": "The base prompt the API uses to give directions on controlling entities.",
              "prompt_device_known_location": "The prompt the API uses when the request comes from a device with a known area.  The '{{ location }}' variable will be replaced with the device's area and potentially floor.",
              "prompt_device_unknown_location": "The prompt the API uses with the request comes from a device whose area is unknown.",
              "prompt_timers_unsupported": "The prompt the API includes if the request comes from a device that cannot set timers.",
              "prompt_exposed_entities": "The prompt the API includes prior to the list of exposed entities and areas."
            }
          }
        }
      }
    }
  },
  "services": {
    "generate_image": {
      "name": "Generate image",
      "description": "Turn a prompt into an image",
      "fields": {
        "config_entry": {
          "name": "Config Entry",
          "description": "The config entry to use for this action"
        },
        "prompt": {
          "name": "Prompt",
          "description": "The text to turn into an image",
          "example": "A photo of a dog"
        },
        "size": {
          "name": "Size",
          "description": "The size of the image to generate"
        },
        "quality": {
          "name": "Quality",
          "description": "The quality of the image that will be generated"
        },
        "style": {
          "name": "Style",
          "description": "The style of the generated image"
        }
      }
    }
  },
  "exceptions": {
    "invalid_config_entry": {
      "message": "Invalid config entry provided. Got {config_entry}"
    }
  }
}
